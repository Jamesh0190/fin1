# package.json
{
  "name": "friendineed-webapp",
  "version": "2.0.0",
  "description": "AI Friend Companion Platform with Multiple AI Providers",
  "main": "index.html",
  "type": "module",
  "scripts": {
    "dev": "netlify dev",
    "build": "echo 'Static site build complete'",
    "deploy": "netlify deploy --prod",
    "test": "echo 'No tests specified'",
    "lint": "echo 'No linting configured'",
    "start": "netlify dev"
  },
  "dependencies": {
    "openai": "^4.28.0",
    "@anthropic-ai/sdk": "^0.17.0"
  },
  "devDependencies": {
    "netlify-cli": "^17.15.0"
  },
  "keywords": [
    "ai", 
    "chatbot", 
    "companions", 
    "mental-health", 
    "support", 
    "openai", 
    "anthropic", 
    "gemini"
  ],
  "author": "FriendiNeed Team",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/your-username/friendineed-webapp"
  },
  "engines": {
    "node": ">=18.0.0"
  }
}

# netlify.toml
[build]
  functions = "netlify/functions"
  command = "echo 'Build complete'"
  publish = "."

[build.environment]
  NODE_VERSION = "18"

[functions]
  node_bundler = "esbuild"

# Rate limiting and security
[[redirects]]
  from = "/api/*"
  to = "/.netlify/functions/:splat"
  status = 200

[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200

[[headers]]
  for = "/.netlify/functions/*"
  [headers.values]
    Access-Control-Allow-Origin = "*"
    Access-Control-Allow-Headers = "Content-Type, Authorization, X-API-Provider, X-API-Key"
    Access-Control-Allow-Methods = "GET, POST, OPTIONS"
    X-Frame-Options = "DENY"
    X-XSS-Protection = "1; mode=block"
    X-Content-Type-Options = "nosniff"
    Referrer-Policy = "strict-origin-when-cross-origin"

[[headers]]
  for = "/*"
  [headers.values]
    X-Frame-Options = "DENY"
    X-XSS-Protection = "1; mode=block"
    X-Content-Type-Options = "nosniff"
    Referrer-Policy = "strict-origin-when-cross-origin"
    Content-Security-Policy = "default-src 'self' 'unsafe-inline' 'unsafe-eval' https:; img-src 'self' data: https:; font-src 'self' https: data:;"

# Environment variables template
# .env.example
OPENAI_API_KEY=sk-your-openai-api-key-here
ANTHROPIC_API_KEY=sk-ant-your-anthropic-api-key-here  
GEMINI_API_KEY=your-gemini-api-key-here
NODE_ENV=development

# Rate limiting
RATE_LIMIT_RPM=10
RATE_LIMIT_BURST=5

# Security
ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8888,https://your-domain.com

# .env
# Copy .env.example to .env and add your actual API keys
# Never commit this file to git!

# .gitignore
# Dependencies
node_modules/
.pnp
.pnp.js

# Production builds
/build
/dist

# Environment variables
.env
.env.local
.env.development.local  
.env.test.local
.env.production.local

# Netlify
.netlify/
netlify/functions-internal/

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/
*.lcov

# nyc test coverage
.nyc_output

# node-waf configuration
.lock-wscript

# Compiled binary addons
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# parcel-bundler cache
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
public

# Storybook build outputs
.out
.storybook-out

# Temporary folders
tmp/
temp/

# Editor directories and files
.idea
.vscode
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?