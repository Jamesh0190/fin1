// netlify/functions/chat.js - Enhanced with better debugging

const headers = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'Content-Type',
  'Access-Control-Allow-Methods': 'POST, OPTIONS',
  'Content-Type': 'application/json',
};

export const handler = async (event, context) => {
  console.log('üöÄ Chat function called');
  console.log('HTTP Method:', event.httpMethod);
  console.log('Headers:', event.headers);

  // Handle preflight requests
  if (event.httpMethod === 'OPTIONS') {
    console.log('‚úÖ Handling CORS preflight');
    return {
      statusCode: 200,
      headers,
    };
  }

  // Only allow POST requests
  if (event.httpMethod !== 'POST') {
    console.log('‚ùå Invalid method:', event.httpMethod);
    return {
      statusCode: 405,
      headers,
      body: JSON.stringify({ error: 'Method not allowed' }),
    };
  }

  try {
    // Check if API key exists
    if (!process.env.OPENAI_API_KEY) {
      console.error('‚ùå OPENAI_API_KEY not found in environment variables');
      return {
        statusCode: 500,
        headers,
        body: JSON.stringify({ 
          error: 'OpenAI API key not configured. Please check environment variables.' 
        }),
      };
    }

    console.log('‚úÖ API key found');

    // Parse the request body
    let requestData;
    try {
      requestData = JSON.parse(event.body);
      console.log('üìù Request data:', { 
        hasMessage: !!requestData.message, 
        hasFriendData: !!requestData.friendData,
        friendName: requestData.friendData?.name 
      });
    } catch (parseError) {
      console.error('‚ùå Error parsing request body:', parseError);
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({ error: 'Invalid JSON in request body' }),
      };
    }

    const { message, friendData } = requestData;

    if (!message || !friendData) {
      console.error('‚ùå Missing required data:', { hasMessage: !!message, hasFriendData: !!friendData });
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({ error: 'Message and friend data are required' }),
      };
    }

    // Import OpenAI (try different import methods)
    let openai;
    try {
      // Try ES6 import first
      const OpenAI = await import('openai');
      openai = new OpenAI.default({
        apiKey: process.env.OPENAI_API_KEY,
      });
      console.log('‚úÖ OpenAI initialized with ES6 import');
    } catch (importError) {
      console.log('‚ö†Ô∏è ES6 import failed, trying CommonJS');
      try {
        // Fallback to CommonJS require
        const OpenAI = require('openai');
        openai = new OpenAI({
          apiKey: process.env.OPENAI_API_KEY,
        });
        console.log('‚úÖ OpenAI initialized with CommonJS');
      } catch (requireError) {
        console.error('‚ùå Failed to import OpenAI:', { importError, requireError });
        return {
          statusCode: 500,
          headers,
          body: JSON.stringify({ error: 'Failed to initialize OpenAI client' }),
        };
      }
    }

    // Create system message
    const systemMessage = `You are ${friendData.name}, an AI friend with these characteristics:

Personality Type: ${friendData.type}
Description: ${friendData.description}
Key Traits: ${friendData.traits ? friendData.traits.join(', ') : 'Helpful, Friendly'}

Stay in character as ${friendData.name}. Be helpful, empathetic, and true to your personality. 
Keep responses conversational and engaging, typically 1-3 sentences unless more detail is needed.
Use a warm, friendly tone that matches your character traits.`;

    console.log('ü§ñ Calling OpenAI API...');

    // Call OpenAI API
    const completion = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [
        { role: 'system', content: systemMessage },
        { role: 'user', content: message }
      ],
      max_tokens: 300,
      temperature: 0.7,
      presence_penalty: 0.1,
      frequency_penalty: 0.1,
    });

    console.log('‚úÖ OpenAI API call successful');

    const response = completion.choices[0]?.message?.content;

    if (!response) {
      console.error('‚ùå No response content received');
      throw new Error('No response generated by OpenAI');
    }

    console.log('‚úÖ Response generated successfully');

    return {
      statusCode: 200,
      headers,
      body: JSON.stringify({ 
        message: response.trim(),
        friendName: friendData.name 
      }),
    };

  } catch (error) {
    console.error('‚ùå Error in chat function:', error);
    console.error('Error stack:', error.stack);

    // Determine error type and message
    let errorMessage = 'I\'m having trouble connecting right now. Please try again in a moment! üòä';
    let statusCode = 500;

    if (error.code === 'insufficient_quota') {
      errorMessage = 'I\'m temporarily unavailable due to API limits. Please try again later.';
      console.error('üí≥ OpenAI quota exceeded');
    } else if (error.code === 'rate_limit_exceeded') {
      errorMessage = 'Too many requests right now. Please wait a moment and try again.';
      statusCode = 429;
      console.error('üö´ Rate limit exceeded');
    } else if (error.message?.includes('API key')) {
      errorMessage = 'There\'s a configuration issue. Please contact support.';
      console.error('üîë API key issue');
    } else if (error.message?.includes('network') || error.message?.includes('fetch')) {
      errorMessage = 'Network connection issue. Please check your internet and try again.';
      console.error('üåê Network error');
    }

    return {
      statusCode: statusCode,
      headers,
      body: JSON.stringify({ 
        error: errorMessage,
        details: process.env.NODE_ENV === 'development' ? error.message : 'Check function logs for details',
        timestamp: new Date().toISOString()
      }),
    };
  }
};